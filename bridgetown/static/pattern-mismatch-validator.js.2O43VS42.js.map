{
  "version": 3,
  "sources": ["../../../../exports/validators/pattern-mismatch-validator.js"],
  "sourcesContent": ["// @ts-check\n\n/**\n * @type {() => import(\"../types.js\").Validator<HTMLElement & { value?: string | null | File | FormData, pattern?: string }>}\n * @example Creating a validator for an input form associated element.\n *   class MyEl {\n *     static validators = [\n *        PatternMismatchValidator()\n *        // Creates a `<input type=\"text\" required=\"\">` element and grabs its `validationMessage`\n *     ]\n *   }\n */\nexport const PatternMismatchValidator = () => {\n  const validatorElement = Object.assign(\n    document.createElement(\"input\"),\n    { type: \"text\", pattern: \"wrong-pattern\", value: \"bad-value\" }\n  )\n\n  /**\n   * @type {ReturnType<PatternMismatchValidator>}\n   */\n  const obj = {\n    observedAttributes: [\"pattern\"],\n    message: validatorElement.validationMessage,\n    checkValidity (element) {\n      /**\n      * @type {ReturnType<import(\"../types.js\").Validator[\"checkValidity\"]>}\n      */\n      const validity = {\n        message: \"\",\n        isValid: true,\n        invalidKeys: []\n      }\n\n      const invalidate = () => {\n        validity.isValid = false\n        validity.message = (typeof obj.message === \"function\" ? obj.message(element) : obj.message) || \"\"\n        validity.invalidKeys.push(\"patternMismatch\")\n        return validity\n      }\n\n      if (element.value == null) {\n        return invalidate()\n      }\n\n\n      const pattern = element.pattern ?? element.getAttribute(\"pattern\")\n      /** If no value is provided, this validator should return true */\n      if (!(typeof element.value === \"string\") || !pattern) {\n        return validity;\n      }\n\n      const regExp = new RegExp(pattern);\n      const isValid = !!regExp.exec(element.value);\n\n      if (isValid) { return validity }\n\n      return invalidate()\n    }\n  }\n  return obj\n}\n"],
  "mappings": "4EAYO,IAAMA,EAA2B,IAAM,CAC5C,IAAMC,EAAmB,OAAO,OAC9B,SAAS,cAAc,OAAO,EAC9B,CAAE,KAAM,OAAQ,QAAS,gBAAiB,MAAO,WAAY,CAC/D,EAKMC,EAAM,CACV,mBAAoB,CAAC,SAAS,EAC9B,QAASD,EAAiB,kBAC1B,cAAeE,EAAS,CAItB,IAAMC,EAAW,CACf,QAAS,GACT,QAAS,GACT,YAAa,CAAC,CAChB,EAEMC,EAAa,KACjBD,EAAS,QAAU,GACnBA,EAAS,SAAW,OAAOF,EAAI,SAAY,WAAaA,EAAI,QAAQC,CAAO,EAAID,EAAI,UAAY,GAC/FE,EAAS,YAAY,KAAK,iBAAiB,EACpCA,GAGT,GAAID,EAAQ,OAAS,KACnB,OAAOE,EAAW,EAIpB,IAAMC,EAAUH,EAAQ,SAAWA,EAAQ,aAAa,SAAS,EASjE,OAPM,OAAOA,EAAQ,OAAU,UAAa,CAACG,GAK7B,CAAC,CADF,IAAI,OAAOA,CAAO,EACR,KAAKH,EAAQ,KAAK,EAErBC,EAEfC,EAAW,CACpB,CACF,EACA,OAAOH,CACT",
  "names": ["PatternMismatchValidator", "validatorElement", "obj", "element", "validity", "invalidate", "pattern"]
}
