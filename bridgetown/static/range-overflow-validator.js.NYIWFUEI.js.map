{
  "version": 3,
  "sources": ["../../../../exports/validators/range-overflow-validator.js"],
  "sourcesContent": ["// @ts-check\n\n/**\n * @type {() => import(\"../types.js\").Validator<HTMLElement & {max?: number}> & { message: (element: HTMLElement, max: number) => string }}\n */\nexport const RangeOverflowValidator = () => {\n  /**\n   * @type {ReturnType<RangeOverflowValidator>}\n   */\n  const obj = {\n    observedAttributes: [\"max\"],\n    message (_element, max) {\n      return `Please select a value that is less than or equal to ${max}.`\n    },\n    checkValidity (element) {\n      /**\n      * @type {ReturnType<import(\"../types.js\").Validator[\"checkValidity\"]>}\n      */\n      const validity = {\n        message: \"\",\n        isValid: true,\n        invalidKeys: []\n      }\n\n      const max = Number(element.max ?? element.getAttribute(\"max\"))\n      const value = element.value\n\n      // If it's not a number, we can't compare.\n      if (typeof value !== \"number\") return validity\n\n      if (value > max) {\n        validity.message = (typeof obj.message === \"function\" ? obj.message(element, max) : obj.message) || \"\"\n        validity.isValid = false\n        validity.invalidKeys.push(\"rangeOverflow\")\n      }\n\n      return validity\n    }\n  }\n\n  return obj\n}\n"],
  "mappings": "4EAKO,IAAMA,EAAyB,IAAM,CAI1C,IAAMC,EAAM,CACV,mBAAoB,CAAC,KAAK,EAC1B,QAASC,EAAUC,EAAK,CACtB,MAAO,uDAAuDA,CAAG,GACnE,EACA,cAAeC,EAAS,CAItB,IAAMC,EAAW,CACf,QAAS,GACT,QAAS,GACT,YAAa,CAAC,CAChB,EAEMF,EAAM,OAAOC,EAAQ,KAAOA,EAAQ,aAAa,KAAK,CAAC,EACvDE,EAAQF,EAAQ,MAGtB,OAAI,OAAOE,GAAU,UAEjBA,EAAQH,IACVE,EAAS,SAAW,OAAOJ,EAAI,SAAY,WAAaA,EAAI,QAAQG,EAASD,CAAG,EAAIF,EAAI,UAAY,GACpGI,EAAS,QAAU,GACnBA,EAAS,YAAY,KAAK,eAAe,GAGpCA,CACT,CACF,EAEA,OAAOJ,CACT",
  "names": ["RangeOverflowValidator", "obj", "_element", "max", "element", "validity", "value"]
}
