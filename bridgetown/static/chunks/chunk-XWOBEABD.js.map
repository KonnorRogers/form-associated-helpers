{
  "version": 3,
  "sources": ["../../../../../exports/validators/too-short-validator.js"],
  "sourcesContent": ["/**\n * @type {import(\"../types.js\").Validator<HTMLElement & { minLength?: number, length?: number }>}\n */\nexport const TooShortValidator = {\n  observedAttributes: [\"minlength\"],\n  checkValidity (element) {\n    /**\n     * @type {ReturnType<import(\"../types.js\").Validator[\"checkValidity\"]>}\n     */\n    const validity = {\n      message: \"\",\n      isValid: true,\n      invalidKeys: []\n    }\n\n    /** if its not a string, we really can't compare. */\n    let value = element.value ?? \"\"\n    if (typeof value !== \"string\") { return validity }\n\n    const minLength = Number(element.minLength || element.getAttribute(\"minlength\"))\n\n    if (!minLength) { return validity }\n\n    if (minLength > value.length) {\n      validity.message = `Please use greater than or equal to ${minLength} characters. You are currently using ${value.length} characters.`;\n      validity.isValid = false\n      validity.invalidKeys.push(\"tooShort\")\n    }\n\n    return validity;\n  }}\n"],
  "mappings": "AAGO,IAAMA,EAAoB,CAC/B,mBAAoB,CAAC,WAAW,EAChC,cAAeC,EAAS,CAItB,IAAMC,EAAW,CACf,QAAS,GACT,QAAS,GACT,YAAa,CAAC,CAChB,EAGIC,EAAQF,EAAQ,OAAS,GAC7B,GAAI,OAAOE,GAAU,SAAY,OAAOD,EAExC,IAAME,EAAY,OAAOH,EAAQ,WAAaA,EAAQ,aAAa,WAAW,CAAC,EAE/E,OAAKG,GAEDA,EAAYD,EAAM,SACpBD,EAAS,QAAU,uCAAuCE,CAAS,wCAAwCD,EAAM,MAAM,eACvHD,EAAS,QAAU,GACnBA,EAAS,YAAY,KAAK,UAAU,GAG/BA,CACT,CAAC",
  "names": ["TooShortValidator", "element", "validity", "value", "minLength"]
}
