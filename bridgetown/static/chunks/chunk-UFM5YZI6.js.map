{
  "version": 3,
  "sources": ["../../../../../exports/mixins/lit-textarea-mixin.js"],
  "sourcesContent": ["import { TooLongValidator } from \"../validators/too-long-validator.js\"\nimport { TooShortValidator } from \"../validators/too-short-validator.js\"\nimport { LitFormAssociatedMixin } from \"./lit-form-associated-mixin.js\"\n\nLitTextareaMixin.formProperties = Object.freeze(\n  Object.assign(\n    {\n      autocomplete: {},\n      wrap: {},\n      readOnly: {attribute: \"readonly\", type: Boolean, reflect: true},\n      placeholder: {},\n      dirName: {},\n      rows: {type: Number},\n      cols: {type: Number},\n\n      // Validation\n      maxLength: {attribute: \"maxlength\", type: Number},\n      minLength: {attribute: \"minlength\", type: Number},\n    },\n    LitFormAssociatedMixin.formProperties\n  )\n)\n\n/**\n * A mixin for build a `<textarea>` specifically for Lit.\n *\n * @see https://webkit.org/blog/13711/elementinternals-and-form-associated-custom-elements/\n * @template {import(\"./vanilla-form-associated-mixin.js\").FormAssociatedElement} T\n * @param {T} superclass\n */\nexport function LitTextareaMixin(superclass) {\n  // This looks weird, but it's the only way to correctly cast the TextAreaMixin to have a \"typesafe\" value.\n  // from `{value: string | File | FormData | null}` to `{value: string}`\n  /** @type {T & import(\"./types.js\").GConstructable<{defaultValue: string, value: string}>} */\n  // @ts-expect-error\n  const modifiedSuperclass = superclass\n\n  return (\n    /**\n      * @implements {HTMLTextAreaElement}\n      */\n    class extends LitFormAssociatedMixin(modifiedSuperclass) {\n\n      /**\n       * @override\n       * @type {Array<import(\"../types.js\").Validator>}\n       */\n      static get validators () {\n        return [\n          ...super.validators,\n          TooLongValidator(),\n          TooShortValidator(),\n        ]\n      }\n\n      static get properties () {\n        /**\n          * @type {null | import(\"lit\").PropertyValues}\n          */\n        // @ts-expect-error\n        const properties = super.properties\n        if (properties) {\n          return {...LitTextareaMixin.formProperties, ...properties}\n        }\n\n\n        return LitTextareaMixin.formProperties\n      }\n      /**\n        * @param {...any} args\n        */\n      constructor (...args) {\n        super(...args)\n\n        /**\n          * @type {HTMLTextAreaElement[\"autocomplete\"]}\n          */\n        this.autocomplete = \"\"\n\n        /**\n          * @type {HTMLTextAreaElement[\"wrap\"]}\n          */\n        this.wrap = \"\"\n\n        /**\n          * @type {HTMLTextAreaElement[\"value\"]}\n          */\n        this.value = \"\"\n\n        /**\n          * @type {HTMLTextAreaElement[\"defaultValue\"]}\n          */\n        this.defaultValue = \"\"\n\n        /**\n          * @type {HTMLTextAreaElement[\"maxLength\"]}\n          */\n        this.maxLength = -1\n\n        /**\n          * @type {HTMLTextAreaElement[\"minLength\"]}\n          */\n        this.minLength = -1\n\n        /**\n          * @type {HTMLTextAreaElement[\"readOnly\"]}\n          */\n        this.readOnly = false\n\n        /**\n          * @type {HTMLTextAreaElement[\"placeholder\"]}\n          */\n        this.placeholder = \"\"\n\n        /**\n          * @type {HTMLTextAreaElement[\"required\"]}\n          */\n        this.required = false\n\n        /**\n          * @type {HTMLTextAreaElement[\"dirName\"]}\n          */\n        this.dirName = \"\"\n\n        /** @type {HTMLTextAreaElement[\"selectionDirection\"]} */\n        this.selectionDirection = \"forward\"\n\n        /**\n          * @type {number}\n          */\n        this.rows = 2\n\n        /**\n          * @type {number}\n          */\n        this.cols = 20\n      }\n\n      /**\n        * @param {Parameters<HTMLTextAreaElement[\"setSelectionRange\"]>} args\n        */\n      setSelectionRange (...args) {\n        const formControl = this.formControl\n\n        if (formControl && \"selectionRange\" in formControl) {\n          /** @type {HTMLTextAreaElement} */ (/** @type {unknown} */ (formControl)).setSelectionRange(...args)\n        }\n      }\n\n      /**\n        * @param {[replacement: string, start: number, end: number, selectionMode?: SelectionMode] | [replacement: string]} args\n        */\n      setRangeText (...args) {\n        const formControl = this.formControl\n\n        if (formControl && \"setRangeText\" in formControl) {\n          // @ts-expect-error\n          /** @type {HTMLTextAreaElement} */ (/** @type {unknown} */ (formControl)).setRangeText(...args)\n        }\n      }\n\n      /**\n        * @returns {HTMLTextAreaElement[\"textLength\"]}\n        */\n      get textLength () {\n        const formControl = /** @type {HTMLTextAreaElement} */ (this.formControl)\n\n        if (formControl && \"textLength\" in formControl) {\n          return formControl.textLength\n        }\n\n        return 0\n      }\n\n      /**\n        * @returns {HTMLTextAreaElement[\"selectionStart\"]}\n        */\n      get selectionStart () {\n        const formControl = /** @type {HTMLTextAreaElement} */ (this.formControl)\n\n        if (formControl && \"selectionStart\" in formControl) {\n          return formControl.selectionStart\n        }\n\n        return 0\n      }\n\n      /**\n        * @returns {HTMLTextAreaElement[\"selectionStart\"]}\n        */\n      get selectionEnd () {\n        const formControl = /** @type {HTMLTextAreaElement} */ (this.formControl)\n\n        if (formControl && \"selectionEnd\" in formControl) {\n          return formControl.selectionEnd\n        }\n\n        return 0\n      }\n\n      /**\n        * @type {HTMLTextAreaElement[\"select\"]}\n        */\n      select () {\n        const formControl = this.formControl\n\n        if (formControl) {\n          /** @type {HTMLTextAreaElement} */ (formControl).select?.()\n        }\n      }\n    }\n  )\n}\n"],
  "mappings": "wQAIAA,EAAiB,eAAiB,OAAO,OACvC,OAAO,OACL,CACE,aAAc,CAAC,EACf,KAAM,CAAC,EACP,SAAU,CAAC,UAAW,WAAY,KAAM,QAAS,QAAS,EAAI,EAC9D,YAAa,CAAC,EACd,QAAS,CAAC,EACV,KAAM,CAAC,KAAM,MAAM,EACnB,KAAM,CAAC,KAAM,MAAM,EAGnB,UAAW,CAAC,UAAW,YAAa,KAAM,MAAM,EAChD,UAAW,CAAC,UAAW,YAAa,KAAM,MAAM,CAClD,EACAC,EAAuB,cACzB,CACF,EASO,SAASD,EAAiBE,EAAY,CAK3C,IAAMC,EAAqBD,EAE3B,OAIE,cAAcD,EAAuBE,CAAkB,CAAE,CAMvD,WAAW,YAAc,CACvB,MAAO,CACL,GAAG,MAAM,WACTC,EAAiB,EACjBC,EAAkB,CACpB,CACF,CAEA,WAAW,YAAc,CAKvB,IAAMC,EAAa,MAAM,WACzB,OAAIA,EACK,CAAC,GAAGN,EAAiB,eAAgB,GAAGM,CAAU,EAIpDN,EAAiB,cAC1B,CAIA,eAAgBO,EAAM,CACpB,MAAM,GAAGA,CAAI,EAKb,KAAK,aAAe,GAKpB,KAAK,KAAO,GAKZ,KAAK,MAAQ,GAKb,KAAK,aAAe,GAKpB,KAAK,UAAY,GAKjB,KAAK,UAAY,GAKjB,KAAK,SAAW,GAKhB,KAAK,YAAc,GAKnB,KAAK,SAAW,GAKhB,KAAK,QAAU,GAGf,KAAK,mBAAqB,UAK1B,KAAK,KAAO,EAKZ,KAAK,KAAO,EACd,CAKA,qBAAsBA,EAAM,CAC1B,IAAMC,EAAc,KAAK,YAErBA,GAAe,mBAAoBA,GACuBA,EAAc,kBAAkB,GAAGD,CAAI,CAEvG,CAKA,gBAAiBA,EAAM,CACrB,IAAMC,EAAc,KAAK,YAErBA,GAAe,iBAAkBA,GAEyBA,EAAc,aAAa,GAAGD,CAAI,CAElG,CAKA,IAAI,YAAc,CAChB,IAAMC,EAAkD,KAAK,YAE7D,OAAIA,GAAe,eAAgBA,EAC1BA,EAAY,WAGd,CACT,CAKA,IAAI,gBAAkB,CACpB,IAAMA,EAAkD,KAAK,YAE7D,OAAIA,GAAe,mBAAoBA,EAC9BA,EAAY,eAGd,CACT,CAKA,IAAI,cAAgB,CAClB,IAAMA,EAAkD,KAAK,YAE7D,OAAIA,GAAe,iBAAkBA,EAC5BA,EAAY,aAGd,CACT,CAKA,QAAU,CACR,IAAMA,EAAc,KAAK,YAErBA,GACkCA,EAAa,SAAS,CAE9D,CACF,CAEJ",
  "names": ["LitTextareaMixin", "LitFormAssociatedMixin", "superclass", "modifiedSuperclass", "TooLongValidator", "TooShortValidator", "properties", "args", "formControl"]
}
