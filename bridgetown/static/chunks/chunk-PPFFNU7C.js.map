{
  "version": 3,
  "sources": ["../../../../../exports/mixins/form-associated-mixin.js"],
  "sourcesContent": ["\n/**\n * A mixin to call `attachInternals()`\n * This is merely an implementation that sets the `formAssociated` static class property and calls `attachInternals()`. It doesn't do anything else. It is intentionally minimal.\n *\n * @see https://webkit.org/blog/13711/elementinternals-and-form-associated-custom-elements/\n * @template {import(\"./types.js\").GConstructable<HTMLElement> & {observedAttributes?: string[]}} T\n * @param {T} superclass\n */\nexport function FormAssociatedMixin(superclass) {\n  return (\n    /**\n     */\n    class extends superclass {\n      static formAssociated = true\n\n      /**\n      * @param {...any} args\n      */\n      constructor(...args) {\n        super(...args)\n\n        if (typeof this.attachInternals !== \"function\") {\n          console.error(`Element Internals are not supported in your browser.`)\n          return\n        }\n\n        try {\n          /**\n          * We dont make it private like #internals because then its not available in the mixin.\n          * @type {ReturnType<HTMLElement[\"attachInternals\"]>}\n          */\n          this.internals = this.attachInternals()\n        } catch (err) {\n          // Perhaps already attached?\n          console.error(err)\n        }\n\n        checkFocusability(this)\n      }\n\n      connectedCallback () {\n        if (this.internals == null) return\n\n        // @ts-expect-error\n        if (typeof super.connectedCallback === \"function\") {\n          // @ts-expect-error\n          super.connectedCallback()\n          checkFocusability(this)\n        }\n      }\n    }\n  )\n}\n/**\n * @param {HTMLElement} element\n * @return {boolean}\n */\nfunction checkFocusability (element) {\n  if (element.shadowRoot && element.shadowRoot.delegatesFocus !== true) {\n    // FormAssociated custom elements either need to have delegatedFocus, or need to have a tabindex on the host.\n    const tabindexAttr = element.getAttribute(\"tabindex\")?.trim()\n    const tabindex = tabindexAttr ? Number(tabindexAttr) : null\n\n    if (tabindex == null || isNaN(tabindex)) {\n      console.error(`FormAssociated custom elements need a \"tabindex\" or to be registered with \"{ delegatesFocus: true }\".\\nThe following element is in violation: `)\n      console.error(element)\n      return false\n    }\n  }\n  return true\n}\n\n"],
  "mappings": "wFASO,SAASA,EAAoBC,EAAY,CAThD,IAAAC,EAUE,OAGEA,EAAA,cAAcD,CAAW,CAMvB,eAAeE,EAAM,CAGnB,GAFA,MAAM,GAAGA,CAAI,EAET,OAAO,KAAK,iBAAoB,WAAY,CAC9C,QAAQ,MAAM,sDAAsD,EACpE,MACF,CAEA,GAAI,CAKF,KAAK,UAAY,KAAK,gBAAgB,CACxC,OAASC,EAAK,CAEZ,QAAQ,MAAMA,CAAG,CACnB,CAEAC,EAAkB,IAAI,CACxB,CAEA,mBAAqB,CACf,KAAK,WAAa,MAGlB,OAAO,MAAM,mBAAsB,aAErC,MAAM,kBAAkB,EACxBA,EAAkB,IAAI,EAE1B,CACF,EArCEC,EADFJ,EACS,iBAAiB,IAD1BA,CAwCJ,CAKA,SAASG,EAAmBE,EAAS,CACnC,GAAIA,EAAQ,YAAcA,EAAQ,WAAW,iBAAmB,GAAM,CAEpE,IAAMC,EAAeD,EAAQ,aAAa,UAAU,GAAG,KAAK,EACtDE,EAAWD,EAAe,OAAOA,CAAY,EAAI,KAEvD,GAAIC,GAAY,MAAQ,MAAMA,CAAQ,EACpC,eAAQ,MAAM;AAAA,wCAAgJ,EAC9J,QAAQ,MAAMF,CAAO,EACd,EAEX,CACA,MAAO,EACT",
  "names": ["FormAssociatedMixin", "superclass", "_a", "args", "err", "checkFocusability", "__publicField", "element", "tabindexAttr", "tabindex"]
}
