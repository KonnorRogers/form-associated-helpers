{
  "version": 3,
  "sources": ["../../../../../exports/mixins/form-associated-mixin.js"],
  "sourcesContent": ["/**\n * Global type to add ElementInternals.states\n * Can go away when TS ships proper support.\n * @type {import(\"../../types/index.d.ts\")}\n */\n\n/**\n * A mixin to call `attachInternals()`\n * This is merely an implementation that sets the `formAssociated` static class property and calls `attachInternals()`. It doesn't do anything else. It is intentionally minimal.\n *\n * @see https://webkit.org/blog/13711/elementinternals-and-form-associated-custom-elements/\n * @template {{ new (...args: any[]): HTMLElement }} T\n * @param {T} superclass\n */\nexport function FormAssociatedMixin(superclass) {\n  class FormAssociatedMixinClass extends superclass {\n      /**\n      * @param {...any} args\n      */\n      constructor(...args) {\n        super(...args)\n\n        /**\n        * We dont make it private like #internals because then its not available in the mixin.\n        * @type {ReturnType<HTMLElement[\"attachInternals\"]>}\n        */\n        this.internals\n\n        if (!this.internals) {\n          this.internals = this.attachInternals()\n        }\n      }\n  }\n\n  // @ts-expect-error\n  if (FormAssociatedMixinClass.formAssociated == null) {\n    FormAssociatedMixinClass.formAssociated = true\n  }\n\n  return FormAssociatedMixinClass\n}\n"],
  "mappings": "AAcO,SAASA,EAAoBC,EAAY,CAC9C,MAAMC,UAAiCD,CAAW,CAI9C,eAAeE,EAAM,CACnB,MAAM,GAAGA,CAAI,EAMb,KAAK,UAEA,KAAK,YACR,KAAK,UAAY,KAAK,gBAAgB,EAE1C,CACJ,CAGA,OAAID,EAAyB,gBAAkB,OAC7CA,EAAyB,eAAiB,IAGrCA,CACT",
  "names": ["FormAssociatedMixin", "superclass", "FormAssociatedMixinClass", "args"]
}
