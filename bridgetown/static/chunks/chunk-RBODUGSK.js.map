{
  "version": 3,
  "sources": ["../../../../../exports/mixins/lit-form-associated-mixin.js"],
  "sourcesContent": ["import { VanillaFormAssociatedMixin } from \"./vanilla-form-associated-mixin.js\"\n\nconst formProperties = Object.freeze({\n  role: {reflect: true},\n  name: {reflect: true},\n  type: {reflect: true},\n  /**\n   * Don't reflect \"disabled\". It breaks the `formDisabledCallback` on formAssociated elements when used with `<fieldset disabled>`.\n   *   https://github.com/whatwg/html/issues/8365\n   */\n  disabled: {type: Boolean},\n  required: {reflect: true, type: Boolean},\n  defaultValue: {attribute: \"value\", reflect: true},\n  valueHasChanged: {type: Boolean, attribute: false, state: true},\n  hasInteracted: {attribute: false, type: Boolean, state: true},\n  formControl: {attribute: false, state: true},\n  value: {attribute: false, state: true},\n})\n\nLitFormAssociatedMixin.formProperties = formProperties\n\n/**\n * An extension of the VanillaFormAssociatedMixin intended for LitElement by providing formProperties and willUpdate() callbacks with the appropriate properties.\n *\n * @see https://webkit.org/blog/13711/elementinternals-and-form-associated-custom-elements/\n * @template {import(\"./vanilla-form-associated-mixin.js\").FormAssociatedElement} T\n * @param {T} superclass\n */\nexport function LitFormAssociatedMixin(superclass) {\n  const finalClass = class extends VanillaFormAssociatedMixin(superclass) {\n    /**\n      * @param {...any} args\n      */\n    constructor (...args) {\n      super(...args)\n\n      const ctor = /** @type {{properties?: { disabled?: { reflect?: boolean }}}} */ (/** @type {unknown} */ (this.constructor))\n      if (ctor.properties?.disabled?.reflect === true) {\n        console.warn(`The following element has their \"disabled\" property set to reflect.`)\n        console.warn(this)\n        console.warn(\"For further reading: https://github.com/whatwg/html/issues/8365\")\n      }\n    }\n\n\n    /**\n     * @type {import(\"lit\").LitElement[\"willUpdate\"]}\n     */\n    willUpdate (changedProperties) {\n      // @ts-expect-error\n      if (typeof super.willUpdate !== \"function\") {\n        return\n      }\n\n      if (changedProperties.has(\"formControl\")) {\n        this.formControl?.addEventListener(\"focusout\", this.handleInteraction)\n        this.formControl?.addEventListener(\"blur\", this.handleInteraction)\n        this.formControl?.addEventListener(\"click\", this.handleInteraction)\n      }\n\n      if (\n        changedProperties.has(\"formControl\")\n        || changedProperties.has(\"defaultValue\")\n        || changedProperties.has(\"value\")\n      ) {\n        this.setFormValue(this.value, this.value)\n      }\n\n      // @ts-expect-error\n      super.willUpdate(changedProperties)\n    }\n  }\n\n  return /** @type {ReturnType<typeof VanillaFormAssociatedMixin<T>> & typeof finalClass} */ (finalClass)\n}\n\n"],
  "mappings": "wFAEA,IAAMA,EAAiB,OAAO,OAAO,CACnC,KAAM,CAAC,QAAS,EAAI,EACpB,KAAM,CAAC,QAAS,EAAI,EACpB,KAAM,CAAC,QAAS,EAAI,EAKpB,SAAU,CAAC,KAAM,OAAO,EACxB,SAAU,CAAC,QAAS,GAAM,KAAM,OAAO,EACvC,aAAc,CAAC,UAAW,QAAS,QAAS,EAAI,EAChD,gBAAiB,CAAC,KAAM,QAAS,UAAW,GAAO,MAAO,EAAI,EAC9D,cAAe,CAAC,UAAW,GAAO,KAAM,QAAS,MAAO,EAAI,EAC5D,YAAa,CAAC,UAAW,GAAO,MAAO,EAAI,EAC3C,MAAO,CAAC,UAAW,GAAO,MAAO,EAAI,CACvC,CAAC,EAEDC,EAAuB,eAAiBD,EASjC,SAASC,EAAuBC,EAAY,CA6CjD,OA5CmB,cAAcC,EAA2BD,CAAU,CAAE,CAItE,eAAgBE,EAAM,CACpB,MAAM,GAAGA,CAAI,EAE2F,KAAK,YACpG,YAAY,UAAU,UAAY,KACzC,QAAQ,KAAK,qEAAqE,EAClF,QAAQ,KAAK,IAAI,EACjB,QAAQ,KAAK,iEAAiE,EAElF,CAMA,WAAYC,EAAmB,CAEzB,OAAO,MAAM,YAAe,aAI5BA,EAAkB,IAAI,aAAa,IACrC,KAAK,aAAa,iBAAiB,WAAY,KAAK,iBAAiB,EACrE,KAAK,aAAa,iBAAiB,OAAQ,KAAK,iBAAiB,EACjE,KAAK,aAAa,iBAAiB,QAAS,KAAK,iBAAiB,IAIlEA,EAAkB,IAAI,aAAa,GAChCA,EAAkB,IAAI,cAAc,GACpCA,EAAkB,IAAI,OAAO,IAEhC,KAAK,aAAa,KAAK,MAAO,KAAK,KAAK,EAI1C,MAAM,WAAWA,CAAiB,EACpC,CACF,CAGF",
  "names": ["formProperties", "LitFormAssociatedMixin", "superclass", "VanillaFormAssociatedMixin", "args", "changedProperties"]
}
