{
  "version": 3,
  "sources": ["../../../../exports/validators/bad-input-validator.js"],
  "sourcesContent": ["/**\n * \"The read-only badInput property of a ValidityState object indicates if the user has provided input that the browser is unable to convert. For example, if you have a number input element whose content is a string.\"\n *  This validator is very similar to the `MirrorValidator` and expects a `formControl` property to exist to read for `BadInput`.\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/badInput}\n * @type {() => import(\"../types.js\").Validator<HTMLElement & { formControl?: HTMLElement & ElementInternals }>}\n */\nexport const BadInputValidator = () => {\n  return {\n    observedAttributes: [\"type\"],\n    checkValidity (element) {\n      /**\n      * @type {ReturnType<import(\"../types.js\").Validator[\"checkValidity\"]>}\n      */\n      const validity = {\n        message: \"\",\n        isValid: true,\n        invalidKeys: []\n      }\n      const formControl = element.formControl\n\n      if (!formControl) return validity\n\n      formControl.checkValidity()\n      if (formControl.validity.badInput === true) {\n        validity.invalidKeys.push(\"badInput\")\n        validity.isValid = false\n        validity.message = formControl.validationMessage\n        return validity\n      }\n\n      return validity\n    }\n  }\n}\n\n"],
  "mappings": "mFAMO,IAAMA,EAAoB,KACxB,CACL,mBAAoB,CAAC,MAAM,EAC3B,cAAeC,EAAS,CAItB,IAAMC,EAAW,CACf,QAAS,GACT,QAAS,GACT,YAAa,CAAC,CAChB,EACMC,EAAcF,EAAQ,YAE5B,OAAKE,GAELA,EAAY,cAAc,EACtBA,EAAY,SAAS,WAAa,KACpCD,EAAS,YAAY,KAAK,UAAU,EACpCA,EAAS,QAAU,GACnBA,EAAS,QAAUC,EAAY,mBACxBD,GAPgBA,CAW3B,CACF",
  "names": ["BadInputValidator", "element", "validity", "formControl"]
}
