{
  "version": 3,
  "sources": ["../../../../../exports/validators/too-short-validator.js"],
  "sourcesContent": ["/**\n * @typedef {import(\"../types.js\")} FormValue\n */\n\n/**\n * @template {HTMLElement & { minLength?: number, value: FormValue }} [T=(HTMLElement & { minLength?: number, value: FormValue })]\n */\nexport const TooShortValidator = () => {\n  const obj = {\n    observedAttributes: [\"minlength\"],\n    /**\n     * @param {T} _hostElement\n     * @param {number} minLength\n     * @param {number} stringLength\n     */\n    message (_hostElement, minLength, stringLength) {\n      // @TODO: This is an edge case with minlength. maxlength has the same issue.\n      // const maxLength = Number(element.minLength || element.getAttribute(\"minlength\"))\n      // const value = element.value\n      // const badInput = Object.assign(document.createElement(\"input\"), {\n      //   value,\n      //   maxLength\n      // })\n\n      // return badInput.validationMessage\n      return `Please lengthen this text to ${minLength} characters or more. (You are currently using ${stringLength} characters).`\n    },\n    /**\n     * @param {T} element\n     */\n    checkValidity (element) {\n      /**\n      * @type {ReturnType<import(\"../types.js\").Validator[\"checkValidity\"]>}\n      */\n      const validity = {\n        message: \"\",\n        isValid: true,\n        invalidKeys: []\n      }\n\n      /** if its not a string, we really can't compare. */\n      let value = element.value ?? \"\"\n      if (typeof value !== \"string\") { return validity }\n\n      const minLength = Number(element.minLength || element.getAttribute(\"minlength\"))\n\n      if (isNaN(minLength) || minLength == null || minLength <= 0) { return validity }\n\n      if (value.length < minLength) {\n        validity.message = (typeof obj.message === \"function\" ? obj.message(element, minLength, value.length) : obj.message) || \"\"\n        validity.isValid = false\n        validity.invalidKeys.push(\"tooShort\")\n      }\n\n      return validity;\n    }\n  }\n\n  return obj\n}\n"],
  "mappings": "AAOO,IAAMA,EAAoB,IAAM,CACrC,IAAMC,EAAM,CACV,mBAAoB,CAAC,WAAW,EAMhC,QAASC,EAAcC,EAAWC,EAAc,CAU9C,MAAO,gCAAgCD,CAAS,iDAAiDC,CAAY,eAC/G,EAIA,cAAeC,EAAS,CAItB,IAAMC,EAAW,CACf,QAAS,GACT,QAAS,GACT,YAAa,CAAC,CAChB,EAGIC,EAAQF,EAAQ,OAAS,GAC7B,GAAI,OAAOE,GAAU,SAAY,OAAOD,EAExC,IAAMH,EAAY,OAAOE,EAAQ,WAAaA,EAAQ,aAAa,WAAW,CAAC,EAE/E,OAAI,MAAMF,CAAS,GAAKA,GAAa,MAAQA,GAAa,GAEtDI,EAAM,OAASJ,IACjBG,EAAS,SAAW,OAAOL,EAAI,SAAY,WAAaA,EAAI,QAAQI,EAASF,EAAWI,EAAM,MAAM,EAAIN,EAAI,UAAY,GACxHK,EAAS,QAAU,GACnBA,EAAS,YAAY,KAAK,UAAU,GAG/BA,CACT,CACF,EAEA,OAAOL,CACT",
  "names": ["TooShortValidator", "obj", "_hostElement", "minLength", "stringLength", "element", "validity", "value"]
}
