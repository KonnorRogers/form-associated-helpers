{
  "version": 3,
  "sources": ["../../../../../exports/validators/too-long-validator.js"],
  "sourcesContent": ["/**\n * @type {import(\"../types.js\").Validator<HTMLElement & { maxLength?: number, length?: number }> & {errorMessage: (maxLength: number, stringLength: number) => string}}\n */\nexport const TooLongValidator = {\n  observedAttributes: [\"maxlength\"],\n  /**\n   * @param {number} maxLength\n   * @param {number} stringLength\n   */\n  errorMessage (maxLength, stringLength) {\n    return `Please use less than or equal to ${maxLength} characters. You are currently using ${stringLength} characters.`\n  },\n  checkValidity (element) {\n    /**\n     * @type {ReturnType<import(\"../types.js\").Validator[\"checkValidity\"]>}\n     */\n    const validity = {\n      message: \"\",\n      isValid: true,\n      invalidKeys: []\n    }\n\n    /** if its not a string, we really can't compare. */\n    let value = element.value ?? \"\"\n    if (typeof value !== \"string\") { return validity }\n\n    const maxLength = Number(element.maxLength || element.getAttribute(\"maxlength\"))\n\n    if (!maxLength) { return validity}\n\n    if (maxLength > value.length) {\n      validity.message = this.errorMessage(maxLength, value.length);\n      validity.isValid = false\n      validity.invalidKeys.push(\"tooLong\")\n    }\n\n    return validity;\n  }}\n\n"],
  "mappings": "AAGO,IAAMA,EAAmB,CAC9B,mBAAoB,CAAC,WAAW,EAKhC,aAAcC,EAAWC,EAAc,CACrC,MAAO,oCAAoCD,CAAS,wCAAwCC,CAAY,cAC1G,EACA,cAAeC,EAAS,CAItB,IAAMC,EAAW,CACf,QAAS,GACT,QAAS,GACT,YAAa,CAAC,CAChB,EAGIC,EAAQF,EAAQ,OAAS,GAC7B,GAAI,OAAOE,GAAU,SAAY,OAAOD,EAExC,IAAMH,EAAY,OAAOE,EAAQ,WAAaA,EAAQ,aAAa,WAAW,CAAC,EAE/E,OAAKF,GAEDA,EAAYI,EAAM,SACpBD,EAAS,QAAU,KAAK,aAAaH,EAAWI,EAAM,MAAM,EAC5DD,EAAS,QAAU,GACnBA,EAAS,YAAY,KAAK,SAAS,GAG9BA,CACT,CAAC",
  "names": ["TooLongValidator", "maxLength", "stringLength", "element", "validity", "value"]
}
