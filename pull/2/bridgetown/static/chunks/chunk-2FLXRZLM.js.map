{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/light-pen@2.2.0/node_modules/light-pen/exports/light-editor.styles.js", "../../../../node_modules/.pnpm/light-pen@2.2.0/node_modules/light-pen/internal/base-event.js", "../../../../node_modules/.pnpm/light-pen@2.2.0/node_modules/light-pen/exports/events/light-resize-event.js", "../../../../node_modules/.pnpm/light-pen@2.2.0/node_modules/light-pen/internal/line-number-plugin.js", "../../../../node_modules/.pnpm/light-pen@2.2.0/node_modules/light-pen/exports/light-editor.js"],
  "sourcesContent": ["import { css } from \"lit\"\n\nexport const styles = css`\n  [part~=\"base\"] {\n\t  font-family: Menlo, Monaco, \"Courier New\", monospace;\n    font-size: 1rem;\n    height: 15em;\n    width: 100%;\n    max-width: 100%;\n    max-height: 100%;\n    position: relative;\n    overflow: hidden;\n    resize: both;\n    font-size: normal;\n    font-family: monospace;\n    line-height: 1.5; /* Inherited to child elements */\n    tab-size: 2;\n    caret-color: black;\n    counter-reset: linenumber 0;\n    display: grid;\n    grid-template-columns: minmax(0, auto) minmax(0, 1fr);\n    grid-template-rows: minmax(0, 1fr);\n  }\n\n  /* Include \"pre\" if line numbers are disabled */\n  [part~=\"textarea\"], .light-line {\n    padding: 0px;\n    padding-inline-start: 6px;\n  }\n\n  /** @TODO: If line numbers disabled */\n  :host([line-numbers=\"disabled\"]) .light-line {\n    padding-inline-start: 0px;\n  }\n\n  :host([line-numbers=\"disabled\"]) [part~=\"pre\"] {\n    padding-inline-start: 6px;\n  }\n\n  [part~=\"textarea\"] {\n    color: transparent;\n    /* color: rgba(255,0,0,0.2); */\n    background-color: transparent;\n    caret-color: inherit;\n    z-index: 1;\n    resize: none;\n  }\n\n  [part~=\"pre\"] {\n    border-color: transparent;\n    position: relative;\n  }\n\n  [part~=\"base\"]:focus-within {\n    outline: 2px solid dodgerblue;\n  }\n\n  [part~=\"textarea\"]:focus {\n    outline: transparent;\n  }\n\n  [part~=\"pre\"], [part~=\"textarea\"], [part~=\"code\"], [part~=\"gutter\"] {\n    /* I don't love this, but it fixes font size inconsistencies on mobile. The alternative is listen for font-size changes, which is...challenging. */\n    -webkit-text-size-adjust: 100%;\n    -moz-text-size-adjust: 100%;\n    text-size-adjust: 100%;\n\n    font-size: inherit;\n    font-family: inherit;\n    line-height: inherit;\n    tab-size: inherit;\n\n    /* this creates line-wrapping. */\n\t  word-break: break-word;\n    white-space: pre-wrap;\n\n    /* This would remove line-wrapping */\n\t  /* word-break: break-all; */\n    /* white-space: pre; */\n  }\n\n  /** Hide scrollbars for the gutter */\n  [part~=\"gutter\"]::-webkit-scrollbar { /* WebKit */\n    width: 0;\n    height: 0;\n  }\n\n  [part~=\"gutter-cell\"] {\n    padding-inline-end: 16px;\n    padding-inline-start: 12px;\n  }\n\n  [part~=\"gutter\"] {\n    color: rgba(0,0,0,0.35);\n\t  background-color: rgba(50,50,50,0.08);\n    font-variant-numeric: tabular-nums;\n    border-inline-end: 1px solid darkgray;\n    -webkit-text-size-adjust: 100%;\n    -moz-text-size-adjust: 100%;\n    text-size-adjust: 100%;\n    overflow-y: scroll;\n    scrollbar-width: none; /* Firefox */\n    -ms-overflow-style: none;  /* Internet Explorer 10+ */\n    font-size: inherit;\n    font-family: inherit;\n    line-height: inherit;\n    tab-size: inherit;\n\n    /* this creates line-wrapping. */\n\t  word-break: break-word;\n    white-space: pre-wrap;\n    text-align: end;\n  }\n\n  [part~=\"gutter-cell\"] {\n    font-size: 100%;\n    display: block;\n  }\n\n  [part~=\"gutter-cell\"] {\n    font-size: 100%;\n    display: block;\n  }\n\n  .light-line {\n    display: inline-block;\n    width: 100%;\n  }\n\n  [part~=\"base\"]:focus-within .light-line.is-active {\n    background-color: rgba(255,255,209,1);\n  }\n\n  /* We don't want to show the focus position if the user hasn't interacted with the textarea. */\n  :where(:host([has-interacted]) .light-line.is-active) {\n    background-color: rgba(0,0,0,0.05);\n  }\n\n  [part~=\"gutter-cell\"][part~=\"gutter-cell--active\"] {\n    background-color: rgba(0,0,0,0.05);\n  }\n\n\n  [part~=\"base-editor\"] {\n    position: relative;\n    display: grid;\n    grid-template-columns: minmax(0, 1fr);\n    grid-template-rows: minmax(0, 1fr);\n  }\n\n  [part~=\"pre\"],\n  [part~=\"textarea\"] {\n    grid-area: 1/1/2/2;\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    border: none;\n    overflow: auto;\n    border: 1px solid transparent;\n  }\n\n  [part~=\"pre\"] {\n\t  color: #272727;\n  }\n\n  [part~=\"gutter\"],\n  [part~=\"pre\"] {\n\t  background-color: #f7f7f7;\n  }\n\n  [part~=\"textarea\"]::selection {\n    color: inherit;\n    background-color: rgba(0,0,0,0.15);\n  }\n`\n", "export class BaseEvent extends Event {\n  /**\n   * @param {string} name\n   * @param {EventInit} [options={}]\n   */\n  constructor (name, options = {}) {\n    if (options.bubbles == null) options.bubbles = true\n    if (options.composed == null) options.composed = true\n    super(name, options)\n  }\n}\n", "// @ts-check\nimport { BaseEvent } from \"../../internal/base-event.js\"\n\nexport class LightResizeEvent extends BaseEvent {\n  /**\n   * @param {\"light-resize\" | Omit<string, \"light-resize\"> & string} [name=\"light-resize\"]\n   * @param {Partial<EventInit & { height: number, width: number }>} [options={}]\n   */\n  constructor (name = \"light-resize\", options = {}) {\n    super(name, options)\n\n    this.height = options.height\n    this.width = options.width\n  }\n}\n\n", "// @ts-check\nimport { Token } from 'prism-esm';\n\nconst newLineRegex = /\\r\\n|\\r|\\n/\n\n/**\n * Options for the LineNumberPlugin. Currently nothing.\n * @typedef {object} Options\n */\n\n/**\n * @param {Options} [options={}]\n * @return {import('./prism-highlight.js').Hook}\n */\nexport function LineNumberPlugin(\n  options = {}\n) {\n  /**\n   * @type {import('./prism-highlight.js').Hook}\n   */\n  return function lineNumberPlugin (env) {\n    env.tokens = splitLinesRec(env.tokens).map((ary) => {\n      if (ary.length <= 0) {\n        ary.push(\" \")\n      }\n\n      return new Token(\"light-line\", ary)\n    });\n\n  }\n}\n\n/**\n * @param {Array<Token | string> | Token | string} content\n * @return {Array<Token | string>}\n */\nfunction wrapContent(\n  content,\n) {\n  return Array.isArray(content) ? content : [content];\n}\n\n/**\n * @param {Array<Token | string>} content\n * @return {Array<Token | string> | string}\n */\nfunction unwrapContent(\n  content,\n) {\n  if (content.length === 0) {\n    return '';\n  } else if (content.length === 1 && typeof content[0] === 'string') {\n    return content[0];\n  }\n\n  return content;\n}\n\n\n/**\n * @param {Array<Token | string>} tokens\n * @return {Array<Array<Token | string>>}\n */\nfunction splitLinesRec(\n  tokens\n) {\n  /** @type {Array<Token | string>} */\n  let currentLine = [];\n  /** @type {Array<Array<Token | string>>} */\n  const lines = [currentLine];\n\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    if (typeof token === 'string') {\n      const split = token.split(newLineRegex);\n      for (let j = 0; j < split.length; j++) {\n        if (j > 0) {\n          lines.push((currentLine = []));\n        }\n\n        const token1 = split[j];\n        if (token1) {\n          currentLine.push(token1);\n        }\n      }\n    } else {\n      // @ts-expect-error\n      const split = splitLinesRec(wrapContent(token.content));\n      if (split.length > 1) {\n        for (let j = 0; j < split.length; j++) {\n          if (j > 0) {\n            lines.push((currentLine = []));\n          }\n\n          const line = split[j];\n          if (line.length) {\n            const token1 = new Token(\n              token.type,\n              unwrapContent(line),\n              token.alias,\n            );\n            token1.length = line.reduce((l, t) => l + t.length, 0);\n            currentLine.push(token1);\n          }\n        }\n      } else {\n        currentLine.push(token);\n      }\n    }\n  }\n\n  return lines;\n}\n\n", "import { html, render } from \"lit\";\n\n\nimport { unsafeHTML } from \"lit/directives/unsafe-html.js\";\nimport { ref } from \"lit/directives/ref.js\";\n\nimport { BaseElement } from \"../internal/base-element.js\";\nimport { baseStyles } from \"./base-styles.js\";\nimport { styles } from \"./light-editor.styles.js\";\nimport { theme } from \"./default-theme.styles.js\";\nimport { dedent } from \"../internal/dedent.js\";\nimport { LightResizeEvent } from \"./events/light-resize-event.js\";\nimport { repeat } from \"lit/directives/repeat.js\";\nimport { elementsToString } from \"../internal/elements-to-strings.js\";\nimport { PrismHighlight, prism } from \"../internal/prism-highlight.js\";\nimport { LineNumberPlugin } from \"../internal/line-number-plugin.js\";\nimport { Token } from \"prism-esm\";\n\nconst newLineRegex = /\\r\\n?|\\n/g\n\n/**\n * A minimal plain text editor with syntax highlighting, line numbers, and line highlighting.\n *    `<light-editor>` is not intended to replace full solutions like CodeMirror, but it\n *    is a lightweight alternative using a `<pre>` overlaid on top of a `<textarea>`\n *    and a few extra divs to make for an enjoyable text editing experience.\n *\n * @customElement\n * @tagname light-editor\n *\n * @event {Event} light-input - Re-emits the textarea's \"input\" event\n * @event {Event} light-change - Re-emits the textarea's \"change\" event\n * @event {Event} light-selectionchange - Re-emits the textarea's \"selectionchange\" event\n * @event {Event} light-focus - Re-emits the textarea's \"focus\" event\n * @event {Event} light-blur - Re-emits the textarea's \"blur\" event\n * @event {Event} light-resize - Is emitting whenever the editor resizes.\n * @event {Event} light-value-change - Emitted whenever the \"value\" attribute of the editor changes.\n *\n */\nexport default class LightEditor extends BaseElement {\n  static baseName = \"light-editor\"\n\n  static styles = [\n    baseStyles,\n    styles,\n    theme,\n  ]\n\n  // We will need to decide if we want to formAssociate or just mirror to a light DOM textarea.\n  // static formAssociated = true\n\n  static properties = {\n    value: {attribute: false},\n    initialValue: {attribute: \"value\"},\n    language: {reflect: true},\n    hasInteracted: { type: Boolean, attribute: \"has-interacted\", reflect: true },\n    preserveWhitespace: { type: Boolean, reflect: true, attribute: \"preserve-whitespace\" }\n  }\n\n  constructor () {\n    super()\n\n    /**\n     * The language used for highlighting. Default is \"html\". \"css\" and \"js\" also included by default.\n     * @type {string}\n     */\n    this.language = 'html'\n\n    /**\n     * The value to set for the text editor\n     * @type {string}\n     */\n    this.value = ''\n\n    /**\n     * This is the value attribute. This is used for resetting the form input.\n     * @type {string}\n     */\n    this.initialValue = ''\n\n    /**\n     * The underlying textarea\n     * @type {null | HTMLTextAreaElement}\n     */\n    this.textarea = null\n\n    /**\n     * Tracks if the user has interacted with the `<textarea>`\n     * @type {boolean}\n     */\n    this.hasInteracted = false\n\n    /**\n     * Whether to strip whitespace before first character, and after the last character.\n     * @type {boolean}\n     */\n    this.preserveWhitespace = false\n  }\n\n  connectedCallback () {\n    super.connectedCallback()\n\n    this.value = this.getAttribute(\"value\") || \"\"\n    this.initialValue = this.getAttribute(\"value\") || \"\"\n\n    if (this.value === this.getAttribute(\"value\") && this.preserveWhitespace !== true) {\n\n      // Remove only lines that are blank with spaces that are blank. trim() removes preceding white-space for the line with characters.\n      // https://stackoverflow.com/questions/14572413/remove-line-breaks-from-start-and-end-of-string#comment104290392_14572494\n      this.value = dedent(this.value.replace(/(^\\s*(?!.+)\\n+)|(\\n+\\s+(?!.+)$)/g, \"\")).trim()\n    }\n  }\n\n  /**\n   * @param {import(\"lit\").PropertyValues<this>} changedProperties\n   */\n  willUpdate (changedProperties) {\n    if (changedProperties.has(\"value\")) {\n      // Emit events on value updates\n      this.dispatchEvent(new Event(\"light-value-change\", { bubbles: true, composed: true }))\n    }\n\n    super.willUpdate(changedProperties)\n  }\n\n  click () {\n    if (this.textarea) {\n      this.textarea.click()\n    }\n  }\n\n  /**\n   * @param {FocusOptions} [options]\n   */\n  focus (options) {\n    if (this.textarea) {\n      this.textarea.focus(options)\n    }\n  }\n\n  render () {\n    const language = this.language\n\n    const highlightedCode = unsafeHTML(this.highlightCode({ code: this.value, language }))\n    this.syncScroll()\n\n    return html`\n\t\t\t<div part=\"base\">\n        <!-- Super important to not have white space here due to how white space is handled -->\n\t\t\t  <div part=\"gutter\"\n\t\t\t    @focus=${() => {\n            this.textarea?.focus()\n\t\t\t    }}\n\t\t\t    @click=${(/** @type {Event} */ e) => {\n\t\t\t      // Don't let a user focus on this area.\n            this.textarea?.focus()\n\t\t\t    }}\n\t\t\t  ></div>\n        <!-- This is where the fancy syntax highlighting comes in -->\n        <div part=\"base-editor\">\n\t\t\t\t  <pre\n            id=\"pre-${language}\"\n            data-code-lang=${language}\n            aria-hidden=\"true\"\n            part=\"pre pre-${language}\"\n            class=\"language-${language}\"\n            tabindex=\"-1\"\n\t\t\t      @focus=${() => {\n              this.textarea?.focus()\n\t\t\t      }}\n\t\t\t      @click=${(/** @type {Event} */ e) => {\n\t\t\t        // Don't let a user focus on this area.\n              this.textarea?.focus()\n\t\t\t      }}\n          ><code\n              part=\"code code-${language}\"\n              class=\"language-${language}\"\n            >${highlightedCode}</code></pre>\n          <!-- IMPORTANT! There must be no white-space above. -->\n\t\t\t\t  <textarea\n\t\t\t\t    aria-labelledby=\"label\"\n            id=\"textarea-${language}\"\n            data-code-lang=${language}\n            part=\"textarea textarea-${language}\"\n            spellcheck=\"false\"\n            autocorrect=\"off\"\n            autocapitalize=\"off\"\n            translate=\"no\"\n            value=${this.initialValue}\n            .value=${this.value}\n            ${ref(this.textareaChanged)}\n            @keyup=${this.keyupHandler}\n            @keydown=${this.keydownHandler}\n            @focus=${() => {\n              this.hasInteracted = true\n              this.syncScroll()\n              this.setCurrentLineHighlight()\n              this.dispatchEvent(new Event(\"light-focus\", { bubbles: true, composed: true }))\n            }}\n            @blur=${() => {\n              this.syncScroll()\n              this.setCurrentLineHighlight()\n              this.dispatchEvent(new Event(\"light-blur\", { bubbles: true, composed: true }))\n            }}\n            @selectionchange=${/** @param {Event} e */ (e) => {\n              this.syncScroll()\n              this.setCurrentLineHighlight()\n              this.dispatchEvent(new Event(\"light-selectionchange\", { bubbles: true, composed: true }))\n            }}\n            @click=${() => {\n              this.setCurrentLineHighlight()\n            }}\n            @pointerdown=${() => {\n              this.setCurrentLineHighlight()\n            }}\n            @pointerup=${() => {\n              this.setCurrentLineHighlight()\n            }}\n            @input=${/** @param {Event} e */ (e) => {\n              this.value = /** @type {HTMLTextAreaElement} */ (e.currentTarget).value\n              this.injectGutterCells()\n              this.setCurrentLineHighlight()\n              this.dispatchEvent(new Event(\"light-input\", { bubbles: true, composed: true }))\n              this.syncScroll()\n            }}\n            @change=${/** @param {Event} e */ (e) => {\n              this.value = /** @type {HTMLTextAreaElement} */ (e.currentTarget).value\n              this.injectGutterCells()\n              this.setCurrentLineHighlight()\n              this.dispatchEvent(new Event(\"light-change\", { bubbles: true, composed: true }))\n              this.syncScroll()\n            }}\n            @scroll=${/** @param {Event} e */ (e) => {\n              this.setCurrentLineHighlight()\n              this.syncScroll()\n            }}\n          ></textarea>\n        </div> <!-- base-editor -->\n\t\t\t</div> <!-- base -->\n\n      <!-- Hidden slot for holding content -->\n      <slot hidden @slotchange=${this.handleSlotChangeEvent}></slot>\n\t\t`\n  }\n\n  /**\n   * @ignore\n   * @param {ResizeObserverEntry[]} entries\n   */\n  handleTextAreaResize (entries) {\n    const { target } = entries[0]\n    const {\n      left, right,\n      top, bottom\n    } = entries[0].contentRect;\n    const width = left + right\n    const height = top + bottom;\n\n    /**\n     * Fires whenever the editor resizes, usually due to zoom in / out\n     */\n    this.dispatchEvent(new LightResizeEvent(\"light-resize\", {height, width}));\n    this.syncScroll()\n    this.injectGutterCells()\n  }\n\n  /**\n   * @param {import(\"lit\").PropertyValues<this>} changedProperties\n   */\n  updated (changedProperties) {\n    super.updated(changedProperties)\n\n    this.syncScroll()\n    this.injectGutterCells()\n    setTimeout(() => this.setCurrentLineHighlight())\n  }\n\n  /**\n   * Syncs the `<pre>` element scroll position to the same as the `<textarea>`\n   * @internal\n   */\n  syncScroll () {\n    /**\n     * @type {undefined | null | HTMLTextAreaElement}\n     */\n    const textarea = this.textarea\n\n    if (textarea == null) return\n\n    const pre = this.shadowRoot?.querySelector(`pre`)\n\n    if (pre) {\n      pre.scrollTop = textarea.scrollTop;\n      pre.scrollLeft = textarea.scrollLeft;\n    }\n\n    const gutter = this.shadowRoot?.querySelector(\"[part~='gutter']\")\n\n    if (gutter) {\n      gutter.scrollTop = textarea.scrollTop;\n      gutter.scrollLeft = textarea.scrollLeft;\n    }\n  }\n\n  /**\n   * @ignore\n   * @param {Element | undefined} element\n   */\n  textareaChanged (element) {\n    if (!(element instanceof HTMLTextAreaElement)) {\n      return\n    }\n\n    const textarea = element\n    this.textarea = textarea\n\n    this.textareaResizeObserver = new ResizeObserver((entries) => this.handleTextAreaResize(entries))\n    this.textareaResizeObserver.observe(textarea)\n\n  }\n\n  /**\n   * @ignore\n   * @param {Event} e\n   */\n  handleSlotChangeEvent (e) {\n    // @TODO: Attach mutations observers to update value.\n    /**\n     * @type {HTMLSlotElement}\n     */\n    // @ts-expect-error\n    const slot = e.target\n\n    const templates = slot.assignedElements({flatten: true})\n\n    // We only unescape when passed into templates.\n    const code = dedent(this.unescapeTags(elementsToString(...templates)).trim())\n\n    if (code) {\n      this.value = code\n      this.initialValue = code\n      this.setAttribute(\"value\", this.initialValue)\n      setTimeout(() => this.textarea?.setSelectionRange(0, 0))\n      this.dispatchEvent(new Event(\"light-input\", { bubbles: true, composed: true }))\n      this.dispatchEvent(new Event(\"light-change\", { bubbles: true, composed: true }))\n    }\n  }\n\n  /**\n   * @ignore\n   * @param {KeyboardEvent} evt\n   */\n  keyupHandler(evt) {\n    this.setCurrentLineHighlight()\n    // setTimeout is needed for Safari which appears to be \"slow\" to update selection APIs.\n    setTimeout(() => this.setCurrentLineHighlight())\n  }\n\n  /**\n   * @ignore\n   * @param {KeyboardEvent} evt\n   */\n  keydownHandler(evt) {\n    this.setCurrentLineHighlight()\n    // setTimeout is needed for Safari which appears to be \"slow\" to update selection APIs.\n    setTimeout(() => this.setCurrentLineHighlight())\n    // this.textarea\n\n    // Let's not trap focus. For now.\n    // if ('Tab' === evt.key) {\n    //   evt.preventDefault()\n    //   target.setRangeText('\\t', target.selectionStart, target.selectionEnd, 'end')\n    //   this.value = target.value\n    //   return\n    // }\n  }\n\n  setCurrentLineHighlight () {\n    const code = this.shadowRoot?.querySelector(\"code\")\n    const gutter = this.shadowRoot?.querySelector(\"[part~='gutter']\")\n\n    const currentLineNumber = this.getCurrentLineNumber()\n\n    if (this.currentLineNumber === currentLineNumber) return\n\n    const prevLineNumber = this.currentLineNumber\n\n    // @ts-expect-error\n    this.currentLineNumber = currentLineNumber\n\n    if (currentLineNumber != null && currentLineNumber >= 0) {\n      const activeLineElement = code?.children[currentLineNumber]\n      const activeGutterElement = gutter?.children[currentLineNumber]\n\n      if (activeLineElement) {\n        code.children[prevLineNumber]?.classList?.remove(\"is-active\")\n        activeLineElement.classList.add(\"is-active\")\n      }\n\n      if (activeGutterElement) {\n        gutter.children[prevLineNumber]?.part?.remove(\"gutter-cell--active\")\n        activeGutterElement.part.add(\"gutter-cell--active\")\n      }\n    }\n  }\n\n  /**\n   * @ignore\n   * Override this to use a highlighter of your choice.\n   * @param {{code: string, language: string}} options\n   */\n  highlightCode (options) {\n    let { code, language } = options\n\n    code = this.injectNewLine(code)\n    code = this.unescapeTags(code)\n\n    code = PrismHighlight(code, prism.languages[language], language, {\n      afterTokenize: [\n        LineNumberPlugin(),\n        (env) => {\n          const currentToken = env.tokens[this.currentLineNumber]\n          if (!currentToken) return\n\n          if (currentToken instanceof Token) {\n            currentToken.type = currentToken.type + \" is-active\"\n          }\n        }\n      ]\n    })\n\n    /** We use this to wrap every line to perform line counting operations. */\n    return code\n  }\n\n  injectGutterCells () {\n    const gutter = this.shadowRoot?.querySelector(\"[part~='gutter']\")\n\n    if (gutter) {\n      render(this.renderGutterCells(), /** @type {HTMLElement} */ (gutter))\n    }\n  }\n\n  getCurrentLineNumber () {\n    const textArea = this.textarea\n\n    if (!textArea) return\n\n    const textLines = textArea.value.substr(0, textArea.selectionStart).split(newLineRegex);\n    const currentLineNumber = textLines.length - 1;\n    // const currentColumnIndex = textLines[textLines.length-1].length;\n    // console.log(\"Current Line Number \"+ currentLineNumber+\" Current Column Index \"+currentColumnIndex );\n\n    return currentLineNumber\n  }\n\n  renderGutterCells () {\n    const lines = this.shadowRoot?.querySelector(\"pre > code\")?.children\n\n    if (!lines) return ``\n\n    const ary = Array.from(lines)\n\n    return repeat(ary, (el, index) => {\n      // @ts-expect-error\n      const height = /** @type {number} */ (el.offsetHeight)\n      const isCurrent = index === this.currentLineNumber\n\n      return index + height + isCurrent.toString()\n    }, (el ,index) => {\n      // @ts-expect-error\n      const height = /** @type {number} */ (el.offsetHeight)\n\n      const isCurrent = index === this.currentLineNumber\n\n      const parts = `gutter-cell ${isCurrent ? \"gutter-cell--active\" : \"\"}`\n      if (height) {\n        return html`<span part=${parts} style=\"${`height: ${height}px`}\">${index}</span>`\n      }\n\n      return html`<span part=${parts}>${index}</span>`\n    })\n  }\n\n  /**\n   * @ignore\n   * @param {string} text\n   */\n  // This gets tricky. We could do this, but it may be unexpected...\n  unescapeTags (text) {\n    // Replace usages of `&lt;/script>` with `</script>`. Match against\n    // `&lt;/` so that other usages of &lt; aren't replaced.\n    // return text.replace(/&lt;\\//g, '</');\n\n    return text.replaceAll(/&lt;\\/([\\w\\d\\.-_]+)>/g, \"</$1>\")\n  }\n\n  /**\n   * @ignore\n   * Highlighters strip newlines. But you can see new lines in <textarea>, this fixes that.\n   * @param {string} text\n   */\n  injectNewLine (text) {\n    // Handle final newlines (see article)\n    if(text === \"\" || text[text.length-1] === \"\\n\") { // If the last character is a newline character\n      text += \" \"; // Add a placeholder space character to the final line\n    }\n\n    return text\n  }\n}\n"],
  "mappings": "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",
  "names": ["styles", "i", "BaseEvent", "name", "options", "LightResizeEvent", "BaseEvent", "name", "options", "newLineRegex", "LineNumberPlugin", "options", "env", "splitLinesRec", "ary", "Token", "wrapContent", "content", "unwrapContent", "tokens", "currentLine", "lines", "i", "token", "split", "j", "token1", "line", "l", "t", "newLineRegex", "LightEditor", "BaseElement", "dedent", "changedProperties", "options", "language", "highlightedCode", "o", "x", "e", "n", "entries", "target", "left", "right", "top", "bottom", "width", "height", "LightResizeEvent", "textarea", "pre", "gutter", "element", "templates", "code", "elementsToString", "evt", "currentLineNumber", "prevLineNumber", "activeLineElement", "activeGutterElement", "PrismHighlight", "prism", "LineNumberPlugin", "env", "currentToken", "Token", "D", "textArea", "lines", "ary", "c", "el", "index", "isCurrent", "parts", "text", "__publicField", "baseStyles", "styles", "theme"]
}
