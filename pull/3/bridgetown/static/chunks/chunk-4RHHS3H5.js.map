{
  "version": 3,
  "sources": ["../../../../../exports/validators/too-short-validator.js"],
  "sourcesContent": ["/**\n * @type {() => import(\"../types.js\").Validator<HTMLElement & { minLength?: number, length?: number }> & { message: (element: HTMLElement, minLength: number, stringLength: number) => string}}\n * }}\n */\nexport const TooShortValidator = () => {\n  return {\n    observedAttributes: [\"minlength\"],\n    message (_element, minLength, stringLength) {\n      return `Please use greater than or equal to ${minLength} characters. You are currently using ${stringLength} characters.`;\n    },\n    checkValidity (element) {\n      /**\n      * @type {ReturnType<import(\"../types.js\").Validator[\"checkValidity\"]>}\n      */\n      const validity = {\n        message: \"\",\n        isValid: true,\n        invalidKeys: []\n      }\n\n      /** if its not a string, we really can't compare. */\n      let value = element.value ?? \"\"\n      if (typeof value !== \"string\") { return validity }\n\n      const minLength = Number(element.minLength || element.getAttribute(\"minlength\"))\n\n      if (!minLength) { return validity }\n\n      if (minLength > value.length) {\n        validity.message = (typeof this.message === \"function\" ? this.message(element, minLength, value.length) : this.message) || \"\"\n        validity.isValid = false\n        validity.invalidKeys.push(\"tooShort\")\n      }\n\n      return validity;\n    }\n  }\n}\n"],
  "mappings": "AAIO,IAAMA,EAAoB,KACxB,CACL,mBAAoB,CAAC,WAAW,EAChC,QAASC,EAAUC,EAAWC,EAAc,CAC1C,MAAO,uCAAuCD,CAAS,wCAAwCC,CAAY,cAC7G,EACA,cAAeC,EAAS,CAItB,IAAMC,EAAW,CACf,QAAS,GACT,QAAS,GACT,YAAa,CAAC,CAChB,EAGIC,EAAQF,EAAQ,OAAS,GAC7B,GAAI,OAAOE,GAAU,SAAY,OAAOD,EAExC,IAAMH,EAAY,OAAOE,EAAQ,WAAaA,EAAQ,aAAa,WAAW,CAAC,EAE/E,OAAKF,GAEDA,EAAYI,EAAM,SACpBD,EAAS,SAAW,OAAO,KAAK,SAAY,WAAa,KAAK,QAAQD,EAASF,EAAWI,EAAM,MAAM,EAAI,KAAK,UAAY,GAC3HD,EAAS,QAAU,GACnBA,EAAS,YAAY,KAAK,UAAU,GAG/BA,CACT,CACF",
  "names": ["TooShortValidator", "_element", "minLength", "stringLength", "element", "validity", "value"]
}
