{
  "version": 3,
  "sources": ["../../../../exports/validators/custom-error-validator.js"],
  "sourcesContent": ["/**\n * A validator for custom errors. This will check if there is an `.error` property or an `error` attribute\n *   and append it to the ValidityState of the custom element.\n * @type {() => import(\"../types.js\").Validator<HTMLElement & { error?: string | boolean }>}\n */\nexport const CustomErrorValidator = () => {\n  return {\n    observedAttributes: [\"error\"],\n    message: \"An error has occurred\",\n    checkValidity (element) {\n      /**\n      * @type {ReturnType<import(\"../types.js\").Validator[\"checkValidity\"]>}\n      */\n      const validity = {\n        message: \"\",\n        isValid: true,\n        invalidKeys: []\n      }\n\n      if (element.error === true || element.hasAttribute(\"error\")) {\n        const defaultErrorMessage = (typeof this.message === \"function\" ? this.message(element) : this.message) || \"\"\n        let message = element.error ?? element.getAttribute(\"error\")\n\n        if (!message || message === true) {\n          message = defaultErrorMessage\n        }\n\n        validity.invalidKeys.push(\"customError\")\n        validity.isValid = false\n        validity.message = message\n        return validity\n      }\n\n      return validity\n    }\n  }\n}\n\n"],
  "mappings": "mFAKO,IAAMA,EAAuB,KAC3B,CACL,mBAAoB,CAAC,OAAO,EAC5B,QAAS,wBACT,cAAeC,EAAS,CAItB,IAAMC,EAAW,CACf,QAAS,GACT,QAAS,GACT,YAAa,CAAC,CAChB,EAEA,GAAID,EAAQ,QAAU,IAAQA,EAAQ,aAAa,OAAO,EAAG,CAC3D,IAAME,GAAuB,OAAO,KAAK,SAAY,WAAa,KAAK,QAAQF,CAAO,EAAI,KAAK,UAAY,GACvGG,EAAUH,EAAQ,OAASA,EAAQ,aAAa,OAAO,EAE3D,OAAI,CAACG,GAAWA,IAAY,MAC1BA,EAAUD,GAGZD,EAAS,YAAY,KAAK,aAAa,EACvCA,EAAS,QAAU,GACnBA,EAAS,QAAUE,EACZF,CACT,CAEA,OAAOA,CACT,CACF",
  "names": ["CustomErrorValidator", "element", "validity", "defaultErrorMessage", "message"]
}
