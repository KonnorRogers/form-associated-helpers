[
        {
          "id": "form-associated-helpers-guides-getting-started",
          "title": "Getting Started",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "guides",
          "tags": "",
          "url": "/form-associated-helpers/guides/getting-started/",
          "content": "Installation\n\nFirst step is to install the helpers.\n\nnpm install form-associated-helpers\n\n\nNext Steps\n\nWith the helpers installed, there are a few paths to take from here. Because the mixins are designed for different levels\nof abstraction, there are some “divergent paths” listed below.\n\nCreating your own form associated “vanilla” web components\n\nCreating your own form associated Lit web components\n\nLearn about form associated “states”"
        },
        {
          "id": "form-associated-helpers-guides-creating-a-vanilla-textarea",
          "title": "Creating a 'vanilla' textarea",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "guides",
          "tags": "",
          "url": "/form-associated-helpers/guides/creating-a-vanilla-textarea/",
          "content": ""
        },
        {
          "id": "form-associated-helpers-guides-creating-a-lit-textarea",
          "title": "Creating a Lit textarea",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "guides",
          "tags": "",
          "url": "/form-associated-helpers/guides/creating-a-lit-textarea/",
          "content": "The first step to building a Lit textarea is to create a component with some minimal markup.\n\nimport { LitElement, css, html } from \"lit\"\n\nexport default class TextareaComponent extends LitElement {\n  static styles = css`\n    :host {\n      display: inline-block;\n    }\n  `\n  render () {\n    return html`\n      &lt;textarea part=\"form-control\"&gt;&lt;/textarea&gt;\n    `\n  }\n}\n\n\nNow that we have initial parts in place, let’s look at how we can “enhance” the\ncomponent to work with form association.\n\nThe first step is to “import” the LitTextareaMixin. There are many mixins which you can find here: Mixins\n\nThe LitTextareaMixin is an opinionated mixin that provides all the same functions a &lt;textarea&gt; has out of the box.\n\nThere are less opinionated mixins, that do less, but we’ll cover that at a later time. For now, let’s get something up and running.\n\nimport { LitElement, css, html } from \"lit\"\n+ import { LitTextareaMixin } from \"form-associated-helpers/exports/mixins/lit-textarea-mixin.js\"\n\n- export default class TextareaComponent extends LitElement {\n+ export default class TextareaComponent extends LitTextareaMixin(LitElement) {\n  static styles = css`\n    :host {\n      display: inline-block;\n    }\n  `\n  render () {\n    return html`\n      &lt;textarea part=\"form-control\"&gt;&lt;/textarea&gt;\n    `\n  }\n}\n\n\nYou’ll notice we import the LitTextareaMixin and add\nit to our LitElement. This mixin will provide all the same functions as a regular textarea\n\nUp next, we need to add a delegatesFocus: true option to our custom textarea. The reason\nis if we don’t add this, when validations fail, the browser will throw a “form control element is not focusable” error.\n\nThe other option is to add a tabindex to the host element, but that’s generally not recommended since you’re usually trying to focus something inside of the custom element, and not the custom element itself.\n\nimport { LitElement, css, html } from \"lit\"\nimport { LitTextareaMixin } from \"form-associated-helpers/exports/mixins/lit-textarea-mixin.js\"\n\nexport default class TextareaComponent extends LitTextareaMixin(LitElement) {\n+   /**\n+    * Without delegatesFocus, or manually setting a `tabindex`, we get this fun message from the browser:\n+    *  \"The invalid form control with name=‘editor’ is not focusable.\n+    */\n+   static shadowRootOptions = {...LitElement.shadowRootOptions, delegatesFocus: true};\n\n  static styles = css`\n    :host {\n      display: inline-block;\n    }\n  `\n  render () {\n    return html`\n      &lt;textarea part=\"form-control\"&gt;&lt;/textarea&gt;\n    `\n  }\n}\n\n\nWith our delegated focus out of the way, now we start looking at some of the “conventions” of the LitTextareaMixin.\nBecause it is an opinionated component, it expects to find a this.formControl. This is used for things like validationTarget\nwhich tells you where to “anchor” native constraint validation popups for when element.reportValidity() is called.\n\nThe easiest way to do this in Lit is to use a ref and when the shadow dom element connects, we\nassign it to this.formControl. Like so:\n\nimport { LitElement, css, html } from \"lit\"\nimport { LitTextareaMixin } from \"form-associated-helpers/exports/mixins/lit-textarea-mixin.js\"\n+ import { ref } from 'lit/directives/ref.js';\n\nexport default class TextareaComponent extends LitTextareaMixin(LitElement) {\n  static shadowRootOptions = {...LitElement.shadowRootOptions, delegatesFocus: true};\n\n  static styles = css`\n    :host {\n      display: inline-block;\n    }\n  `\n  render () {\n    + return html`\n      &lt;textarea\n        part=\"form-control\"\n        ${ref(this.formControlChanged)}\n      &gt;&lt;/textarea&gt;\n    `\n  }\n\n+  formControlChanged (el) {\n+    this.formControl = el\n+  }\n}\n\n\nWe should start now having validations working and anchored off of our textarea!!\n\nThe LitTextareaMixin contains some “prebuilt” validators. The 3 supported out of the box validators\nare minlength, maxlength and required.\n\nFinal component:\n\nimport { LitElement, css, html } from \"lit\"\nimport { ref } from 'lit/directives/ref.js';\nimport { live } from 'lit/directives/live.js';\nimport { LitTextareaMixin } from \"form-associated-helpers/exports/mixins/lit-textarea-mixin.js\"\nimport { MirrorValidator } from \"form-associated-helpers/exports/validators/mirror-validator.js\";\n\nexport default class TextareaComponent extends LitTextareaMixin(LitElement) {\n  /**\n   * Without delegatesFocus, or manually setting a `tabindex`, we get this fun message from the browser:\n   *  \"The invalid form control with name=‘editor’ is not focusable.\n   */\n  static shadowRootOptions = {...LitElement.shadowRootOptions, delegatesFocus: true};\n\n  static validators get () {\n    return [\n      // Contains validators for `required`, `minlength`, and `maxlength`\n      ...super.validators,\n      // Additional validators here:\n    ]\n  }\n\n  static get properties () {\n    return {\n      ...super.properties,\n      // Your properties here.\n    }\n  }\n\n  constructor () {\n    super()\n    // ...\n  }\n\n  static styles = css`\n    :host {\n      display: inline-block;\n    }\n  `\n\n  render () {\n    return html`\n      &lt;textarea\n        part=\"form-control\"\n        ${ref(this.formControlChanged)}\n        .defaultValue=${this.defaultValue}\n        .value=${live(this.value)}\n        rows=${this.rows}\n        cols=${this.cols}\n        maxlength=${this.maxLength}\n        minlength=${this.minLength}\n        dirname=${this.dirName}\n        placeholder=${this.placeholder}\n        ?readonly=${this.readOnly}\n        ?required=${this.required}\n        wrap=${this.wrap}\n        autocomplete=${this.autocomplete}\n        @input=${(/** @type {Event} */ e) =&gt; {\n          this.value = /** @type {HTMLTextAreaElement} */ (e.currentTarget).value\n        }}\n        @change=${(/** @type {Event} */ e) =&gt; {\n          this.value = /** @type {HTMLTextAreaElement} */ (e.currentTarget).value\n        }}\n        @keydown=${(/** @type {Event} */ e) =&gt; {\n          this.value = /** @type {HTMLTextAreaElement} */ (e.currentTarget).value\n        }}\n      &gt;&lt;/textarea&gt;\n    `\n  }\n\n  /**\n   * @param {FocusOptions} options\n   */\n  focus (options) {\n    if (this.formControl) {\n      this.formControl.focus(options)\n      return\n    }\n\n    super.focus(options)\n  }\n\n  /**\n   * @param {Element | undefined} textarea\n   */\n  formControlChanged(textarea) {\n    if (!textarea) {\n      this.formControl = undefined\n      return\n    }\n\n    this.formControl = /** @type {HTMLTextAreaElement} */ (textarea)\n  }\n}"
        },
        {
          "id": "form-associated-helpers-guides",
          "title": "Guides",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "guides",
          "tags": "",
          "url": "/form-associated-helpers/guides/",
          "content": ""
        },
        {
          "id": "form-associated-helpers-how-tos",
          "title": "How Tos",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "how_tos",
          "tags": "",
          "url": "/form-associated-helpers/how-tos/",
          "content": ""
        },
        {
          "id": "form-associated-helpers-references-understanding-form-states",
          "title": "Understanding Form States",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "references",
          "tags": "",
          "url": "/form-associated-helpers/references/understanding-form-states/",
          "content": "There are a number of distinct “states” a form associated component can be in. The\nfollowing are the CSS selectors available and what they mean.\n\n\n  \n    \n      \n        \n          States\n        \n        \n          Description\n        \n      \n    \n    \n      \n        \n          :valid,\n          [data-valid],\n          :state(valid)\n        \n        \n          When a form associated element meets all of it's validator requirements, regardless of if\n          the control has been interacted with.\n          \n          Equivalent to :valid\n          \n          https://developer.mozilla.org/en-US/docs/Web/CSS/:valid\n        \n      \n      \n        \n          :invalid,\n          [data-invalid],\n          :state(invalid)\n        \n        \n          When a form associated element does not meet all of it's validator requirements,\n          regardless of if the form control has been interacted with.\n          \n          Equivalent to :invalid\n          \n          https://developer.mozilla.org/en-US/docs/Web/CSS/:invalid\n        \n      \n      \n        \n          \n          [data-user-valid],\n          :state(user-valid)\n        \n        \n          When a form associated element does not meet all of it's validator requirements\n          and it has been meaningfully attempted to be interacted with.\n          \n          Equivalent to :user-invalid\n          \n          https://developer.mozilla.org/en-US/docs/Web/CSS/:user-valid\n        \n      \n      \n        \n          \n          [data-user-invalid],\n          :state(user-invalid)\n        \n        \n          When a form associated does not meet all of it's validator requirements,\n          and it has been meaningfully attempted to be interacted with.\n          \n          Equivalent to :user-invalid\n          \n          https://developer.mozilla.org/en-US/docs/Web/CSS/:user-invalid\n        \n      \n    \n  \n\n\nIn more simplistic terms, here’s the difference between states with the user-* prefix, and those without.\n\nuser-* is active when you \"focusout\" out of the form control, and the value of the element is NOT equal to the \"defaultValue\".\n\n\n\n\n  \n    \n\n    \n      \n        \n          \n            \n              This is a custom textarea\n            \n            \n            \n          \n\n          \n            \n              This is a regular textarea\n            \n            \n            def\n          \n        \n      \n\n      \n\n      Reset\n      Disable\n      Submit\n\n      \n\n      \n        This textarea has different \"states\" based on interactions.\n      \n      \n      \n        Current Custom Textarea State: \n      \n\n      \n    \n  \n\n\n:user-valid: Need to have changed the value. If you’re in a user-valid state, and then start changing the value to an invalid value, then it becomes :invalid, but not :user-invalid until the user blurs from the form control.\n\n:user-invalid: If we go from :user-invalid to a valid state, we become :user-valid, unlike :user-valid -&gt; :invalid\n\n:user-invalid -&gt; :user-valid\n:user-valid -&gt; :invalid until blur then :user-invalid\n\nOn a form reset, a form control is only ever :valid or :invalid. Never :user-*.\n\nWhen disabled, it is neither :valid or :invalid. Instead it is :disabled"
        },
        {
          "id": "form-associated-helpers-references",
          "title": "References",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "references",
          "tags": "",
          "url": "/form-associated-helpers/references/",
          "content": ""
        },
        {
          "id": "form-associated-helpers-references-mixins-form-associated-mixin",
          "title": "Form Associated Mixin",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "mixins",
          "tags": "",
          "url": "/form-associated-helpers/references/mixins/form-associated-mixin/",
          "content": ""
        },
        {
          "id": "form-associated-helpers-references-mixins-lit-form-associated-mixin",
          "title": "Lit Form Associated Mixin",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "mixins",
          "tags": "",
          "url": "/form-associated-helpers/references/mixins/lit-form-associated-mixin/",
          "content": ""
        },
        {
          "id": "form-associated-helpers-references-mixins-textarea-mixin",
          "title": "Textarea Mixin",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "mixins",
          "tags": "",
          "url": "/form-associated-helpers/references/mixins/textarea-mixin/",
          "content": ""
        },
        {
          "id": "form-associated-helpers-references-mixins-vanilla-form-associated-mixin",
          "title": "Vanilla Form Associated Mixin",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "mixins",
          "tags": "",
          "url": "/form-associated-helpers/references/mixins/vanilla-form-associated-mixin/",
          "content": ""
        },
        {
          "id": "form-associated-helpers-references-validators",
          "title": "References",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "validators",
          "tags": "",
          "url": "/form-associated-helpers/references/validators/",
          "content": ""
        },
        {
          "id": "form-associated-helpers-references-validators-bad-input-validator",
          "title": "Bad Input Validator",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "validators",
          "tags": "",
          "url": "/form-associated-helpers/references/validators/bad-input-validator/",
          "content": ""
        },
        {
          "id": "form-associated-helpers-references-validators-custom-error-validator",
          "title": "Custom Error Validator",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "validators",
          "tags": "",
          "url": "/form-associated-helpers/references/validators/custom-error-validator/",
          "content": ""
        },
        {
          "id": "form-associated-helpers-references-validators-mirror-validator",
          "title": "Mirror Validator",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "validators",
          "tags": "",
          "url": "/form-associated-helpers/references/validators/mirror-validator/",
          "content": ""
        },
        {
          "id": "form-associated-helpers-references-validators-pattern-mismatch-validator",
          "title": "Pattern Mismatch Validator",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "validators",
          "tags": "",
          "url": "/form-associated-helpers/references/validators/pattern-mismatch-validator/",
          "content": ""
        },
        {
          "id": "form-associated-helpers-references-validators-range-overflow-validator",
          "title": "Range Overflow Validator",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "validators",
          "tags": "",
          "url": "/form-associated-helpers/references/validators/range-overflow-validator/",
          "content": ""
        },
        {
          "id": "form-associated-helpers-references-validators-range-underflow-validator",
          "title": "Range Underflow Validator",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "validators",
          "tags": "",
          "url": "/form-associated-helpers/references/validators/range-underflow-validator/",
          "content": ""
        },
        {
          "id": "form-associated-helpers-references-validators-step-mismatch-validator",
          "title": "Step Mismatch Validator",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "validators",
          "tags": "",
          "url": "/form-associated-helpers/references/validators/step-mismatch-validator/",
          "content": ""
        },
        {
          "id": "form-associated-helpers-references-validators-too-long-validator",
          "title": "Too Long Validator",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "validators",
          "tags": "",
          "url": "/form-associated-helpers/references/validators/too-long-validator/",
          "content": ""
        },
        {
          "id": "form-associated-helpers-references-validators-too-short-validator",
          "title": "Too Short Validator",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "validators",
          "tags": "",
          "url": "/form-associated-helpers/references/validators/too-short-validator/",
          "content": ""
        },
        {
          "id": "form-associated-helpers-references-validators-type-mismatch-validator",
          "title": "Type Mismatch Validator",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "validators",
          "tags": "",
          "url": "/form-associated-helpers/references/validators/type-mismatch-validator/",
          "content": ""
        },
        {
          "id": "form-associated-helpers-references-validators-value-missing-validator",
          "title": "Value Missing Validator",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "validators",
          "tags": "",
          "url": "/form-associated-helpers/references/validators/value-missing-validator/",
          "content": ""
        },
        {
          "id": "form-associated-helpers-references-changelog",
          "title": "Changelog",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "references",
          "tags": "",
          "url": "/form-associated-helpers/references/changelog/",
          "content": "0.0.4 02/13/2024\n\n\n  validationTarget is defined as a getter and falls back to the value of this.formControl\n\n\n0.0.3 02/13/2024\n\n\n  Added multiple tests around states."
        },
        {
          "id": "form-associated-helpers",
          "title": "Form Associated Helpers",
          "collection": {
            "label": "pages",
            "name": "Posts"
          },
          "categories": "",
          "tags": "",
          "url": "/form-associated-helpers/",
          "content": ""
        },
        {
          "id": "form-associated-helpers-bridgetown_quick_search-index.json",
          "title": "Index",
          "collection": {
            "label": "pages",
            "name": "Posts"
          },
          "categories": "",
          "tags": "",
          "url": "/form-associated-helpers/bridgetown_quick_search/index.json",
          "content": "[\n  {%- assign looped = false %}\n  {%- assign documents = site.documents %}\n  {%- if site.content_engine == \"resource\" %}{% assign documents = site.resources %}{% endif %}\n  {%- for document in documents %}\n    {%- if document.title %}\n      {%- unless document.exclude_from_search or document.id == \"\" %}\n        {%- assign url = document.url %}\n        {%- if site.content_engine == \"resource\" %}{% assign url = document.relative_url %}{% endif %}\n        {%- if looped %},{% endif %}\n        {\n          \"id\": \"{{ url | slugify }}\",\n          \"title\": {{ document.title | jsonify }},\n          {%- if document.collection %}\n          \"collection\": {\n            \"label\": {{ document.collection.label | jsonify }},\n            \"name\": {{ document.collection.name | default: \"Posts\" | jsonify }}\n          },\n          {%- endif %}\n          \"categories\": {{ document.categories | join: \", \" | jsonify }},\n          \"tags\": {{ document.tags | join: \", \" | jsonify }},\n          \"url\": {{ url | jsonify }},\n          \"content\": {{ document.content | strip_html | replace_regex: \"[\\s/\\n]+\",\" \" | strip | jsonify }}\n        }\n        {%- assign looped = true %}\n      {%- endunless %}\n    {%- endif %}\n  {%- endfor %}\n  {%- for document in site.generated_pages %}\n    {%- if document.name contains \".md\" or document.name contains \".html\" %}\n      {%- if document.title %}\n        {%- unless document.exclude_from_search %}\n          {%- if looped %},{% endif %}\n          {\n            \"id\": \"{{ document.url | slugify }}\",\n            \"title\": {{ document.title | jsonify }},\n            \"categories\": {{ document.categories | join: \", \" | jsonify }},\n            \"tags\": {{ document.tags | join: \", \" | jsonify }},\n            \"url\": {{ document.url | jsonify }},\n            \"content\": {{ document.content | strip_html | replace_regex: \"[\\s/\\n]+\",\" \" | strip | jsonify }}\n          }\n        {%- endunless %}\n      {%- endif %}\n    {%- endif %}\n  {%- endfor %}\n]"
        },
        {
          "id": "",
          "title": "A collection of reusable mixins + helpers for working with form associated custom elements.",
          "collection": {
            "label": "data",
            "name": "Posts"
          },
          "categories": "",
          "tags": "",
          "url": "",
          "content": ""
        }
]
